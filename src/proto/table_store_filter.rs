// This file is generated by rust-protobuf 2.25.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `table_store_filter.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_0;

#[derive(PartialEq,Clone,Default)]
pub struct ValueTransferRule {
    // message fields
    regex: ::protobuf::SingularField<::std::string::String>,
    cast_type: ::std::option::Option<VariantType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValueTransferRule {
    fn default() -> &'a ValueTransferRule {
        <ValueTransferRule as ::protobuf::Message>::default_instance()
    }
}

impl ValueTransferRule {
    pub fn new() -> ValueTransferRule {
        ::std::default::Default::default()
    }

    // required string regex = 1;


    pub fn get_regex(&self) -> &str {
        match self.regex.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_regex(&mut self) {
        self.regex.clear();
    }

    pub fn has_regex(&self) -> bool {
        self.regex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regex(&mut self, v: ::std::string::String) {
        self.regex = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regex(&mut self) -> &mut ::std::string::String {
        if self.regex.is_none() {
            self.regex.set_default();
        }
        self.regex.as_mut().unwrap()
    }

    // Take field
    pub fn take_regex(&mut self) -> ::std::string::String {
        self.regex.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .proto.VariantType cast_type = 2;


    pub fn get_cast_type(&self) -> VariantType {
        self.cast_type.unwrap_or(VariantType::VT_INTEGER)
    }
    pub fn clear_cast_type(&mut self) {
        self.cast_type = ::std::option::Option::None;
    }

    pub fn has_cast_type(&self) -> bool {
        self.cast_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cast_type(&mut self, v: VariantType) {
        self.cast_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ValueTransferRule {
    fn is_initialized(&self) -> bool {
        if self.regex.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.regex)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.cast_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.regex.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.cast_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.regex.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.cast_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValueTransferRule {
        ValueTransferRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "regex",
                |m: &ValueTransferRule| { &m.regex },
                |m: &mut ValueTransferRule| { &mut m.regex },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VariantType>>(
                "cast_type",
                |m: &ValueTransferRule| { &m.cast_type },
                |m: &mut ValueTransferRule| { &mut m.cast_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValueTransferRule>(
                "ValueTransferRule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValueTransferRule {
        static instance: ::protobuf::rt::LazyV2<ValueTransferRule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValueTransferRule::new)
    }
}

impl ::protobuf::Clear for ValueTransferRule {
    fn clear(&mut self) {
        self.regex.clear();
        self.cast_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValueTransferRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueTransferRule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SingleColumnValueFilter {
    // message fields
    comparator: ::std::option::Option<ComparatorType>,
    column_name: ::protobuf::SingularField<::std::string::String>,
    column_value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    filter_if_missing: ::std::option::Option<bool>,
    latest_version_only: ::std::option::Option<bool>,
    pub value_trans_rule: ::protobuf::SingularPtrField<ValueTransferRule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SingleColumnValueFilter {
    fn default() -> &'a SingleColumnValueFilter {
        <SingleColumnValueFilter as ::protobuf::Message>::default_instance()
    }
}

impl SingleColumnValueFilter {
    pub fn new() -> SingleColumnValueFilter {
        ::std::default::Default::default()
    }

    // required .proto.ComparatorType comparator = 1;


    pub fn get_comparator(&self) -> ComparatorType {
        self.comparator.unwrap_or(ComparatorType::CT_EQUAL)
    }
    pub fn clear_comparator(&mut self) {
        self.comparator = ::std::option::Option::None;
    }

    pub fn has_comparator(&self) -> bool {
        self.comparator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_comparator(&mut self, v: ComparatorType) {
        self.comparator = ::std::option::Option::Some(v);
    }

    // required string column_name = 2;


    pub fn get_column_name(&self) -> &str {
        match self.column_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_column_name(&mut self) {
        self.column_name.clear();
    }

    pub fn has_column_name(&self) -> bool {
        self.column_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_column_name(&mut self, v: ::std::string::String) {
        self.column_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_name(&mut self) -> &mut ::std::string::String {
        if self.column_name.is_none() {
            self.column_name.set_default();
        }
        self.column_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_column_name(&mut self) -> ::std::string::String {
        self.column_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes column_value = 3;


    pub fn get_column_value(&self) -> &[u8] {
        match self.column_value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_column_value(&mut self) {
        self.column_value.clear();
    }

    pub fn has_column_value(&self) -> bool {
        self.column_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_column_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.column_value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.column_value.is_none() {
            self.column_value.set_default();
        }
        self.column_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_column_value(&mut self) -> ::std::vec::Vec<u8> {
        self.column_value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bool filter_if_missing = 4;


    pub fn get_filter_if_missing(&self) -> bool {
        self.filter_if_missing.unwrap_or(false)
    }
    pub fn clear_filter_if_missing(&mut self) {
        self.filter_if_missing = ::std::option::Option::None;
    }

    pub fn has_filter_if_missing(&self) -> bool {
        self.filter_if_missing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter_if_missing(&mut self, v: bool) {
        self.filter_if_missing = ::std::option::Option::Some(v);
    }

    // required bool latest_version_only = 5;


    pub fn get_latest_version_only(&self) -> bool {
        self.latest_version_only.unwrap_or(false)
    }
    pub fn clear_latest_version_only(&mut self) {
        self.latest_version_only = ::std::option::Option::None;
    }

    pub fn has_latest_version_only(&self) -> bool {
        self.latest_version_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latest_version_only(&mut self, v: bool) {
        self.latest_version_only = ::std::option::Option::Some(v);
    }

    // optional .proto.ValueTransferRule value_trans_rule = 6;


    pub fn get_value_trans_rule(&self) -> &ValueTransferRule {
        self.value_trans_rule.as_ref().unwrap_or_else(|| <ValueTransferRule as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value_trans_rule(&mut self) {
        self.value_trans_rule.clear();
    }

    pub fn has_value_trans_rule(&self) -> bool {
        self.value_trans_rule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value_trans_rule(&mut self, v: ValueTransferRule) {
        self.value_trans_rule = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value_trans_rule(&mut self) -> &mut ValueTransferRule {
        if self.value_trans_rule.is_none() {
            self.value_trans_rule.set_default();
        }
        self.value_trans_rule.as_mut().unwrap()
    }

    // Take field
    pub fn take_value_trans_rule(&mut self) -> ValueTransferRule {
        self.value_trans_rule.take().unwrap_or_else(|| ValueTransferRule::new())
    }
}

impl ::protobuf::Message for SingleColumnValueFilter {
    fn is_initialized(&self) -> bool {
        if self.comparator.is_none() {
            return false;
        }
        if self.column_name.is_none() {
            return false;
        }
        if self.column_value.is_none() {
            return false;
        }
        if self.filter_if_missing.is_none() {
            return false;
        }
        if self.latest_version_only.is_none() {
            return false;
        }
        for v in &self.value_trans_rule {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.comparator, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.column_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.column_value)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.filter_if_missing = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.latest_version_only = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value_trans_rule)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.comparator {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.column_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.column_value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.filter_if_missing {
            my_size += 2;
        }
        if let Some(v) = self.latest_version_only {
            my_size += 2;
        }
        if let Some(ref v) = self.value_trans_rule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.comparator {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.column_name.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.column_value.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(v) = self.filter_if_missing {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.latest_version_only {
            os.write_bool(5, v)?;
        }
        if let Some(ref v) = self.value_trans_rule.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SingleColumnValueFilter {
        SingleColumnValueFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ComparatorType>>(
                "comparator",
                |m: &SingleColumnValueFilter| { &m.comparator },
                |m: &mut SingleColumnValueFilter| { &mut m.comparator },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "column_name",
                |m: &SingleColumnValueFilter| { &m.column_name },
                |m: &mut SingleColumnValueFilter| { &mut m.column_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "column_value",
                |m: &SingleColumnValueFilter| { &m.column_value },
                |m: &mut SingleColumnValueFilter| { &mut m.column_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "filter_if_missing",
                |m: &SingleColumnValueFilter| { &m.filter_if_missing },
                |m: &mut SingleColumnValueFilter| { &mut m.filter_if_missing },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "latest_version_only",
                |m: &SingleColumnValueFilter| { &m.latest_version_only },
                |m: &mut SingleColumnValueFilter| { &mut m.latest_version_only },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValueTransferRule>>(
                "value_trans_rule",
                |m: &SingleColumnValueFilter| { &m.value_trans_rule },
                |m: &mut SingleColumnValueFilter| { &mut m.value_trans_rule },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SingleColumnValueFilter>(
                "SingleColumnValueFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SingleColumnValueFilter {
        static instance: ::protobuf::rt::LazyV2<SingleColumnValueFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SingleColumnValueFilter::new)
    }
}

impl ::protobuf::Clear for SingleColumnValueFilter {
    fn clear(&mut self) {
        self.comparator = ::std::option::Option::None;
        self.column_name.clear();
        self.column_value.clear();
        self.filter_if_missing = ::std::option::Option::None;
        self.latest_version_only = ::std::option::Option::None;
        self.value_trans_rule.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SingleColumnValueFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SingleColumnValueFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompositeColumnValueFilter {
    // message fields
    combinator: ::std::option::Option<LogicalOperator>,
    pub sub_filters: ::protobuf::RepeatedField<Filter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CompositeColumnValueFilter {
    fn default() -> &'a CompositeColumnValueFilter {
        <CompositeColumnValueFilter as ::protobuf::Message>::default_instance()
    }
}

impl CompositeColumnValueFilter {
    pub fn new() -> CompositeColumnValueFilter {
        ::std::default::Default::default()
    }

    // required .proto.LogicalOperator combinator = 1;


    pub fn get_combinator(&self) -> LogicalOperator {
        self.combinator.unwrap_or(LogicalOperator::LO_NOT)
    }
    pub fn clear_combinator(&mut self) {
        self.combinator = ::std::option::Option::None;
    }

    pub fn has_combinator(&self) -> bool {
        self.combinator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_combinator(&mut self, v: LogicalOperator) {
        self.combinator = ::std::option::Option::Some(v);
    }

    // repeated .proto.Filter sub_filters = 2;


    pub fn get_sub_filters(&self) -> &[Filter] {
        &self.sub_filters
    }
    pub fn clear_sub_filters(&mut self) {
        self.sub_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_filters(&mut self, v: ::protobuf::RepeatedField<Filter>) {
        self.sub_filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sub_filters(&mut self) -> &mut ::protobuf::RepeatedField<Filter> {
        &mut self.sub_filters
    }

    // Take field
    pub fn take_sub_filters(&mut self) -> ::protobuf::RepeatedField<Filter> {
        ::std::mem::replace(&mut self.sub_filters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CompositeColumnValueFilter {
    fn is_initialized(&self) -> bool {
        if self.combinator.is_none() {
            return false;
        }
        for v in &self.sub_filters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.combinator, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sub_filters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.combinator {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        for value in &self.sub_filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.combinator {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        for v in &self.sub_filters {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompositeColumnValueFilter {
        CompositeColumnValueFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LogicalOperator>>(
                "combinator",
                |m: &CompositeColumnValueFilter| { &m.combinator },
                |m: &mut CompositeColumnValueFilter| { &mut m.combinator },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Filter>>(
                "sub_filters",
                |m: &CompositeColumnValueFilter| { &m.sub_filters },
                |m: &mut CompositeColumnValueFilter| { &mut m.sub_filters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CompositeColumnValueFilter>(
                "CompositeColumnValueFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CompositeColumnValueFilter {
        static instance: ::protobuf::rt::LazyV2<CompositeColumnValueFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CompositeColumnValueFilter::new)
    }
}

impl ::protobuf::Clear for CompositeColumnValueFilter {
    fn clear(&mut self) {
        self.combinator = ::std::option::Option::None;
        self.sub_filters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompositeColumnValueFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompositeColumnValueFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ColumnPaginationFilter {
    // message fields
    offset: ::std::option::Option<i32>,
    limit: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ColumnPaginationFilter {
    fn default() -> &'a ColumnPaginationFilter {
        <ColumnPaginationFilter as ::protobuf::Message>::default_instance()
    }
}

impl ColumnPaginationFilter {
    pub fn new() -> ColumnPaginationFilter {
        ::std::default::Default::default()
    }

    // required int32 offset = 1;


    pub fn get_offset(&self) -> i32 {
        self.offset.unwrap_or(0)
    }
    pub fn clear_offset(&mut self) {
        self.offset = ::std::option::Option::None;
    }

    pub fn has_offset(&self) -> bool {
        self.offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i32) {
        self.offset = ::std::option::Option::Some(v);
    }

    // required int32 limit = 2;


    pub fn get_limit(&self) -> i32 {
        self.limit.unwrap_or(0)
    }
    pub fn clear_limit(&mut self) {
        self.limit = ::std::option::Option::None;
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i32) {
        self.limit = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ColumnPaginationFilter {
    fn is_initialized(&self) -> bool {
        if self.offset.is_none() {
            return false;
        }
        if self.limit.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.offset = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.limit = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.offset {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.limit {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.offset {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.limit {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ColumnPaginationFilter {
        ColumnPaginationFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "offset",
                |m: &ColumnPaginationFilter| { &m.offset },
                |m: &mut ColumnPaginationFilter| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "limit",
                |m: &ColumnPaginationFilter| { &m.limit },
                |m: &mut ColumnPaginationFilter| { &mut m.limit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ColumnPaginationFilter>(
                "ColumnPaginationFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ColumnPaginationFilter {
        static instance: ::protobuf::rt::LazyV2<ColumnPaginationFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ColumnPaginationFilter::new)
    }
}

impl ::protobuf::Clear for ColumnPaginationFilter {
    fn clear(&mut self) {
        self.offset = ::std::option::Option::None;
        self.limit = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ColumnPaginationFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ColumnPaginationFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Filter {
    // message fields
    field_type: ::std::option::Option<FilterType>,
    filter: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Filter {
    fn default() -> &'a Filter {
        <Filter as ::protobuf::Message>::default_instance()
    }
}

impl Filter {
    pub fn new() -> Filter {
        ::std::default::Default::default()
    }

    // required .proto.FilterType type = 1;


    pub fn get_field_type(&self) -> FilterType {
        self.field_type.unwrap_or(FilterType::FT_SINGLE_COLUMN_VALUE)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: FilterType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // required bytes filter = 2;


    pub fn get_filter(&self) -> &[u8] {
        match self.filter.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::vec::Vec<u8>) {
        self.filter = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.filter.is_none() {
            self.filter.set_default();
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::vec::Vec<u8> {
        self.filter.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Filter {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        if self.filter.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.filter.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.filter.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Filter {
        Filter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FilterType>>(
                "type",
                |m: &Filter| { &m.field_type },
                |m: &mut Filter| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "filter",
                |m: &Filter| { &m.filter },
                |m: &mut Filter| { &mut m.filter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Filter>(
                "Filter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Filter {
        static instance: ::protobuf::rt::LazyV2<Filter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Filter::new)
    }
}

impl ::protobuf::Clear for Filter {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Filter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Filter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VariantType {
    VT_INTEGER = 0,
    VT_DOUBLE = 1,
    VT_STRING = 3,
    VT_NULL = 6,
    VT_BLOB = 7,
}

impl ::protobuf::ProtobufEnum for VariantType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VariantType> {
        match value {
            0 => ::std::option::Option::Some(VariantType::VT_INTEGER),
            1 => ::std::option::Option::Some(VariantType::VT_DOUBLE),
            3 => ::std::option::Option::Some(VariantType::VT_STRING),
            6 => ::std::option::Option::Some(VariantType::VT_NULL),
            7 => ::std::option::Option::Some(VariantType::VT_BLOB),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VariantType] = &[
            VariantType::VT_INTEGER,
            VariantType::VT_DOUBLE,
            VariantType::VT_STRING,
            VariantType::VT_NULL,
            VariantType::VT_BLOB,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<VariantType>("VariantType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for VariantType {
}

impl ::std::default::Default for VariantType {
    fn default() -> Self {
        VariantType::VT_INTEGER
    }
}

impl ::protobuf::reflect::ProtobufValue for VariantType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FilterType {
    FT_SINGLE_COLUMN_VALUE = 1,
    FT_COMPOSITE_COLUMN_VALUE = 2,
    FT_COLUMN_PAGINATION = 3,
}

impl ::protobuf::ProtobufEnum for FilterType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FilterType> {
        match value {
            1 => ::std::option::Option::Some(FilterType::FT_SINGLE_COLUMN_VALUE),
            2 => ::std::option::Option::Some(FilterType::FT_COMPOSITE_COLUMN_VALUE),
            3 => ::std::option::Option::Some(FilterType::FT_COLUMN_PAGINATION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FilterType] = &[
            FilterType::FT_SINGLE_COLUMN_VALUE,
            FilterType::FT_COMPOSITE_COLUMN_VALUE,
            FilterType::FT_COLUMN_PAGINATION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FilterType>("FilterType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FilterType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for FilterType {
    fn default() -> Self {
        FilterType::FT_SINGLE_COLUMN_VALUE
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ComparatorType {
    CT_EQUAL = 1,
    CT_NOT_EQUAL = 2,
    CT_GREATER_THAN = 3,
    CT_GREATER_EQUAL = 4,
    CT_LESS_THAN = 5,
    CT_LESS_EQUAL = 6,
}

impl ::protobuf::ProtobufEnum for ComparatorType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ComparatorType> {
        match value {
            1 => ::std::option::Option::Some(ComparatorType::CT_EQUAL),
            2 => ::std::option::Option::Some(ComparatorType::CT_NOT_EQUAL),
            3 => ::std::option::Option::Some(ComparatorType::CT_GREATER_THAN),
            4 => ::std::option::Option::Some(ComparatorType::CT_GREATER_EQUAL),
            5 => ::std::option::Option::Some(ComparatorType::CT_LESS_THAN),
            6 => ::std::option::Option::Some(ComparatorType::CT_LESS_EQUAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ComparatorType] = &[
            ComparatorType::CT_EQUAL,
            ComparatorType::CT_NOT_EQUAL,
            ComparatorType::CT_GREATER_THAN,
            ComparatorType::CT_GREATER_EQUAL,
            ComparatorType::CT_LESS_THAN,
            ComparatorType::CT_LESS_EQUAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ComparatorType>("ComparatorType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ComparatorType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ComparatorType {
    fn default() -> Self {
        ComparatorType::CT_EQUAL
    }
}

impl ::protobuf::reflect::ProtobufValue for ComparatorType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LogicalOperator {
    LO_NOT = 1,
    LO_AND = 2,
    LO_OR = 3,
}

impl ::protobuf::ProtobufEnum for LogicalOperator {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LogicalOperator> {
        match value {
            1 => ::std::option::Option::Some(LogicalOperator::LO_NOT),
            2 => ::std::option::Option::Some(LogicalOperator::LO_AND),
            3 => ::std::option::Option::Some(LogicalOperator::LO_OR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LogicalOperator] = &[
            LogicalOperator::LO_NOT,
            LogicalOperator::LO_AND,
            LogicalOperator::LO_OR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LogicalOperator>("LogicalOperator", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LogicalOperator {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for LogicalOperator {
    fn default() -> Self {
        LogicalOperator::LO_NOT
    }
}

impl ::protobuf::reflect::ProtobufValue for LogicalOperator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18table_store_filter.proto\x12\x05proto\"Z\n\x11ValueTransferRule\
    \x12\x14\n\x05regex\x18\x01\x20\x02(\tR\x05regex\x12/\n\tcast_type\x18\
    \x02\x20\x01(\x0e2\x12.proto.VariantTypeR\x08castType\"\xb4\x02\n\x17Sin\
    gleColumnValueFilter\x125\n\ncomparator\x18\x01\x20\x02(\x0e2\x15.proto.\
    ComparatorTypeR\ncomparator\x12\x1f\n\x0bcolumn_name\x18\x02\x20\x02(\tR\
    \ncolumnName\x12!\n\x0ccolumn_value\x18\x03\x20\x02(\x0cR\x0bcolumnValue\
    \x12*\n\x11filter_if_missing\x18\x04\x20\x02(\x08R\x0ffilterIfMissing\
    \x12.\n\x13latest_version_only\x18\x05\x20\x02(\x08R\x11latestVersionOnl\
    y\x12B\n\x10value_trans_rule\x18\x06\x20\x01(\x0b2\x18.proto.ValueTransf\
    erRuleR\x0evalueTransRule\"\x84\x01\n\x1aCompositeColumnValueFilter\x126\
    \n\ncombinator\x18\x01\x20\x02(\x0e2\x16.proto.LogicalOperatorR\ncombina\
    tor\x12.\n\x0bsub_filters\x18\x02\x20\x03(\x0b2\r.proto.FilterR\nsubFilt\
    ers\"F\n\x16ColumnPaginationFilter\x12\x16\n\x06offset\x18\x01\x20\x02(\
    \x05R\x06offset\x12\x14\n\x05limit\x18\x02\x20\x02(\x05R\x05limit\"G\n\
    \x06Filter\x12%\n\x04type\x18\x01\x20\x02(\x0e2\x11.proto.FilterTypeR\
    \x04type\x12\x16\n\x06filter\x18\x02\x20\x02(\x0cR\x06filter*U\n\x0bVari\
    antType\x12\x0e\n\nVT_INTEGER\x10\0\x12\r\n\tVT_DOUBLE\x10\x01\x12\r\n\t\
    VT_STRING\x10\x03\x12\x0b\n\x07VT_NULL\x10\x06\x12\x0b\n\x07VT_BLOB\x10\
    \x07*a\n\nFilterType\x12\x1a\n\x16FT_SINGLE_COLUMN_VALUE\x10\x01\x12\x1d\
    \n\x19FT_COMPOSITE_COLUMN_VALUE\x10\x02\x12\x18\n\x14FT_COLUMN_PAGINATIO\
    N\x10\x03*\x80\x01\n\x0eComparatorType\x12\x0c\n\x08CT_EQUAL\x10\x01\x12\
    \x10\n\x0cCT_NOT_EQUAL\x10\x02\x12\x13\n\x0fCT_GREATER_THAN\x10\x03\x12\
    \x14\n\x10CT_GREATER_EQUAL\x10\x04\x12\x10\n\x0cCT_LESS_THAN\x10\x05\x12\
    \x11\n\rCT_LESS_EQUAL\x10\x06*4\n\x0fLogicalOperator\x12\n\n\x06LO_NOT\
    \x10\x01\x12\n\n\x06LO_AND\x10\x02\x12\t\n\x05LO_OR\x10\x03J\xc9\x0f\n\
    \x06\x12\x04\0\0=\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x0e\n\n\n\x02\x05\0\x12\x04\x04\0\x0b\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x04\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\x05\x04\x13\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03\x05\x04\x0e\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03\x05\x11\x12\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x04\x12\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x06\x04\r\n\x0c\n\x05\x05\0\x02\x01\
    \x02\x12\x03\x06\x10\x11\n\x1d\n\x04\x05\0\x02\x02\x12\x03\x08\x04\x12\
    \x1a\x10VT_BOOLEAN\x20=\x202;\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\
    \x08\x04\r\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x08\x10\x11\n\x0b\n\x04\
    \x05\0\x02\x03\x12\x03\t\x04\x10\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\t\
    \x04\x0b\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\t\x0e\x0f\n\x0b\n\x04\x05\
    \0\x02\x04\x12\x03\n\x04\x10\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\n\x04\
    \x0b\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\n\x0e\x0f\n\n\n\x02\x04\0\x12\
    \x04\r\0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\r\x08\x19\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x0e\x04\x1e\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0e\x04\
    \x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\r\x13\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x0e\x14\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x1c\
    \x1d\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0f\x04'\n\x0c\n\x05\x04\0\x02\
    \x01\x04\x12\x03\x0f\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0f\r\
    \x18\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\x19\"\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x0f%&\n\n\n\x02\x05\x01\x12\x04\x12\0\x16\x01\n\n\n\
    \x03\x05\x01\x01\x12\x03\x12\x05\x0f\n\x0b\n\x04\x05\x01\x02\0\x12\x03\
    \x13\x04\x1f\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x13\x04\x1a\n\x0c\n\
    \x05\x05\x01\x02\0\x02\x12\x03\x13\x1d\x1e\n\x0b\n\x04\x05\x01\x02\x01\
    \x12\x03\x14\x04\"\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x14\x04\x1d\n\
    \x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x14\x20!\n\x0b\n\x04\x05\x01\x02\
    \x02\x12\x03\x15\x04\x1d\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\x15\x04\
    \x18\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x15\x1b\x1c\n\n\n\x02\x05\
    \x02\x12\x04\x18\0\x1f\x01\n\n\n\x03\x05\x02\x01\x12\x03\x18\x05\x13\n\
    \x0b\n\x04\x05\x02\x02\0\x12\x03\x19\x04$\n\x0c\n\x05\x05\x02\x02\0\x01\
    \x12\x03\x19\x04\x0c\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03\x19\"#\n\x0b\
    \n\x04\x05\x02\x02\x01\x12\x03\x1a\x04$\n\x0c\n\x05\x05\x02\x02\x01\x01\
    \x12\x03\x1a\x04\x10\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03\x1a\"#\n\
    \x0b\n\x04\x05\x02\x02\x02\x12\x03\x1b\x04$\n\x0c\n\x05\x05\x02\x02\x02\
    \x01\x12\x03\x1b\x04\x13\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03\x1b\"#\
    \n\x0b\n\x04\x05\x02\x02\x03\x12\x03\x1c\x04$\n\x0c\n\x05\x05\x02\x02\
    \x03\x01\x12\x03\x1c\x04\x14\n\x0c\n\x05\x05\x02\x02\x03\x02\x12\x03\x1c\
    \"#\n\x0b\n\x04\x05\x02\x02\x04\x12\x03\x1d\x04$\n\x0c\n\x05\x05\x02\x02\
    \x04\x01\x12\x03\x1d\x04\x10\n\x0c\n\x05\x05\x02\x02\x04\x02\x12\x03\x1d\
    \"#\n\x0b\n\x04\x05\x02\x02\x05\x12\x03\x1e\x04$\n\x0c\n\x05\x05\x02\x02\
    \x05\x01\x12\x03\x1e\x04\x11\n\x0c\n\x05\x05\x02\x02\x05\x02\x12\x03\x1e\
    \"#\n\n\n\x02\x04\x01\x12\x04!\0(\x01\n\n\n\x03\x04\x01\x01\x12\x03!\x08\
    \x1f\n\x0b\n\x04\x04\x01\x02\0\x12\x03\"\x04/\n\x0c\n\x05\x04\x01\x02\0\
    \x04\x12\x03\"\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\"\r\x1b\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\"\x1c&\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\"-.\n\x0b\n\x04\x04\x01\x02\x01\x12\x03#\x04+\n\x0c\n\x05\
    \x04\x01\x02\x01\x04\x12\x03#\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03#\r\x13\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03#\x14\x1f\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03#)*\n$\n\x04\x04\x01\x02\x02\x12\x03$\
    \x04+\"\x17\x20Serialized\x20SQLVariant\n\n\x0c\n\x05\x04\x01\x02\x02\
    \x04\x12\x03$\x04\x0c\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03$\r\x12\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03$\x13\x1f\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03$)*\n\x0b\n\x04\x04\x01\x02\x03\x12\x03%\x04/\n\x0c\n\
    \x05\x04\x01\x02\x03\x04\x12\x03%\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\
    \x05\x12\x03%\r\x11\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03%\x12#\n\x0c\
    \n\x05\x04\x01\x02\x03\x03\x12\x03%-.\n\x0b\n\x04\x04\x01\x02\x04\x12\
    \x03&\x04/\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x03&\x04\x0c\n\x0c\n\x05\
    \x04\x01\x02\x04\x05\x12\x03&\r\x11\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\
    \x03&\x12%\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03&-.\n\x0b\n\x04\x04\
    \x01\x02\x05\x12\x03'\x044\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03'\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03'\r\x1e\n\x0c\n\x05\x04\x01\
    \x02\x05\x01\x12\x03'\x1f/\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03'23\n\
    \n\n\x02\x05\x03\x12\x04*\0.\x01\n\n\n\x03\x05\x03\x01\x12\x03*\x05\x14\
    \n\x0b\n\x04\x05\x03\x02\0\x12\x03+\x04$\n\x0c\n\x05\x05\x03\x02\0\x01\
    \x12\x03+\x04\n\n\x0c\n\x05\x05\x03\x02\0\x02\x12\x03+\"#\n\x0b\n\x04\
    \x05\x03\x02\x01\x12\x03,\x04$\n\x0c\n\x05\x05\x03\x02\x01\x01\x12\x03,\
    \x04\n\n\x0c\n\x05\x05\x03\x02\x01\x02\x12\x03,\"#\n\x0b\n\x04\x05\x03\
    \x02\x02\x12\x03-\x04$\n\x0c\n\x05\x05\x03\x02\x02\x01\x12\x03-\x04\t\n\
    \x0c\n\x05\x05\x03\x02\x02\x02\x12\x03-\"#\n\n\n\x02\x04\x02\x12\x040\03\
    \x01\n\n\n\x03\x04\x02\x01\x12\x030\x08\"\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x031\x04/\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x031\x04\x0c\n\x0c\n\x05\
    \x04\x02\x02\0\x06\x12\x031\r\x1c\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x031\
    \x1d'\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x031-.\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x032\x04/\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x032\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\x01\x06\x12\x032\r\x13\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x032\x14\x1f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x032-.\n\n\
    \n\x02\x04\x03\x12\x045\08\x01\n\n\n\x03\x04\x03\x01\x12\x035\x08\x1e\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x036\x04\x1e\n\x0c\n\x05\x04\x03\x02\0\x04\
    \x12\x036\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x036\r\x12\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x036\x13\x19\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x036\x1c\x1d\n\x0b\n\x04\x04\x03\x02\x01\x12\x037\x04\x1d\n\x0c\n\
    \x05\x04\x03\x02\x01\x04\x12\x037\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\
    \x05\x12\x037\r\x12\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x037\x13\x18\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x037\x1b\x1c\n\n\n\x02\x04\x04\x12\
    \x04:\0=\x01\n\n\n\x03\x04\x04\x01\x12\x03:\x08\x0e\n\x0b\n\x04\x04\x04\
    \x02\0\x12\x03;\x04$\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03;\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\0\x06\x12\x03;\r\x17\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03;\x18\x1c\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03;\"#\n6\n\x04\
    \x04\x04\x02\x01\x12\x03<\x04$\")\x20Serialized\x20string\x20of\x20filte\
    r\x20of\x20the\x20type\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03<\x04\
    \x0c\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03<\r\x12\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x03<\x13\x19\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03<\"\
    #\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
